* 文档结构
org是基于Outline模式的，它提供了更灵活的编辑结构文件的命令

** 大纲
Org是在大纲模式之上实现的。大纲模式可以让我们用层次结构来组织文档，
这是笔记和想法最好的实现方式。这种结构可以折叠文档的一部分而只是显
示文档的大概结构或者只显示我们正在处理的部分。Org大大简化了大纲模式
的使用，它把大纲模式的整个显示/隐藏功能整合到了一个命令中:org-cycle
这个命令绑定到了TAB键上。

** 标题
标题定义了大纲树的结构。它以牌一行左边缘的一个或多个星号开头，例如：
#+BEGIN_SRC 
* Top level headline
** Second level
*** 3rd level
    some text
*** 3rd level
    more text

* Another top level headline
#+END_SRC
如果你不喜欢太多的星号，可以以空格后加一个星号作为标题的开头

** 视图循环
大纲模式可以隐藏缓冲区里的部分正文。Org用绑定到TAB和S-TAB上的两个全命令来改变视图
| TAB             | 子树循环：当加上一个前缀参数时(C-u TAB),在下面的姿态中改变当前子树的视图 |
|                 | FOLDED -> CHILDREN --> SUBTREE                                           |
|                 | 当加上shift键时会触发全局的视图循环                                      |
| S-TAB和C-u      | 全局循环: 使整个缓冲区在下列状态中循环                                   |
|                 | OVERVIEW -> ShowALL                                                      |
| C-u C-u C-u TAB | 显示全部，包括Drawers                                                    |
当Emacs刚打开文件时，全局的状态是OVERVIEW,也即只有顶层的标题可见.这可以通过变量org-startup-folded来设置。
也可以通过startup关键字设置只对单个文件有效:
#+BEGIN_SRC 
#+STARTUP: content
#+END_SRC

** 移动
下面的命令可以跳转到缓冲区其他的标题。
| C-c C-n | 下一个标题     |
| C-c C-p | 上一个标题     |
| C-c C-f | 下一个同级标题 |
| C-c C-b | 上一个同级标题 |
| C-c C-u | 回到上层标题   |

** 结构编辑
| M-RET               | 插入一个同级标题。如果光标在文本列表中,创建一个新的项      |
|                     | 如果牌一行的中间，这一行会被分开，后面的一部分成为新的标题 |
| M-S-RET             | 插入一个和当前标题同级的TODO项                             |
| TAB(新的空的条目中) | 如果新的条目中还没有文字，TAB会调整到合适的级别            |
| M-LEFT/REGHT        | 将当前的标题提升/降低一个等级                              |
| M-S-LEFT/RIGHT      | 将当前子提升/降低一个等级                                  |
| M-S-UP/DOWN         | 将子树上/下移(和前后个子树交换)                            |
| C-c C-w             | 将条目或区域传送到另一个文件中。                           |
| C-x n s/w           | 将缓冲区视图局限到当前子树中/两次放宽视图                  |
如果有活动区域(暂时标记状态),提升和降低功能将会对区域中的所有标题起作用.

** 稀疏树
Org模式的一个重要的功能是能根据大纲树中选择的信息构造出稀疏的树，这样文档就可以尽可能地折叠,
但是选择的信息和它对应的标题会显示出来,试下就知道它是怎样工作的了.
Org模式有几个命令可以创建这种树,这些命令都可以通过调试器来使用:
| C-c /   | 它会提示再输入一个字符来选择稀疏树的创建命令                |
| C-c 、r | 触发后,会提示输入匹配串，并且将所有匹配的项显示成稀疏树命令 |
其他的基于TODO关键字,标签或属性来选择标题的稀疏树命令

** 文本列表
在大纲树的一项中,自定义格式的列表可以提供更多的组织结构,也使我们可以得到一个复选框
Org模式可以处理这种列表,并且HTML导出器也支持这种格式.
Org能够识别有序列表,无序列表和描述列表

无序列表项以'-', '+'或者'*'开头
有序列表项以'1.', '1)'开头
描述列表用'::'将项和描述分开

同一列表中的项的第一行必须缩进相同程序.当下一行的缩进与列表项的开头的符号或者数字相同或者更小时,
这一项就结束了.当所有的项都关上时,或者后面有两个空行时,列表就结束了.例如:
#+BEGIN_SRC 
** Lord of the Rings
   My favourite scenes are (in this order)
   1. The attack of the Rohirrim
   2. Eowyn's fight with the witch king
      + this was already my favourite scene in the book
      + I really like Miranda Otto.
   Important actors in this film are:
   - Elijah Wood :: He plays Frodo
   - Sean Austin :: He plays Sam, Frodo's Friend.

#+END_SRC
| Tab            | 折叠项                                                                                               |
| M-RET          | 在当前级别插入一个项,有前缀时是强制新建一个标题                                                      |
| M-S-RET        | 插入一个带有复选框的项                                                                               |
| M-S-UP/DOWN    | 将当前项和它的子项向上/下移动(和相同的缩进的前/后一个基交换位置).如果列表是有序的,数字就不会自动改变 |
| M-LEFT/M-RIGHT | 提升、降低项的缩进，不包含子项                                                                       |
| M-S-LEFT/RIGHT | 提升、降低项的缩进，包含子项                                                                         |
| C-c C-c        | 如果项中有复选框，就触发改变其状态。并且自动保持西藏的符号与缩进在列表中的一致性                     |
| C-c -          | 循环改变将当前列表的项标志符号                                                                       |

** 脚注
脚注就是以脚注定义符号开头的一段话,脚注定义符号是将脚注名称放在一个方括号里形成的,要求放在
第0列,不能缩进.而引用就是在正文中将脚注名称用方括号括起来.例如:
#+BEGIN_SRC 
The Org Homepage[fn:1]. noew looks a lot better than it used to.
...
[fn:1] The link is: http://orgmode.org

#+END_SRC
用下面的命令来处理脚注:
| C-c C-x | 这是一个移动命令.当光标处理引用处时,跳转到它的定义;当光标处理定义处时,跳转到第一个        |
|         | 引用处.其他情况下,新建一个脚注.当有前缀时,会提供一个菜单供选择操作,其中包括重新给脚注编号 |
| C-c C-c | 在定义和引用之间跳转                                                                      |

* 表格
Org提供了快速易用的表格编辑功能.通过调用Emacs内嵌的'calc'包(对Emacs的计算器可以查看Emacs Calculator手册)
它支持类似于制表软件的计算操作.
Org能够很容易地处理ASCII文本表格.任何以'|'为首个非空字符的行都会被认为是表格的一部分.'|'列分隔符.
一个表格是下面的样子:
| Name   | Phone | Age |
|--------+-------+-----|
| Petter |  1234 |  17 |
|--------+-------+-----|
| Anna   |  4569 |  26 |
当你在表格内部输入TAB,RET或者<C-c> <C-c>时表格都会自动调整.TAB会进入下一个区域(RET进入下一行)
并且创建一个新的行.表格的缩进程序在第一行设定.以'|-'开头的一行会作为一个水平分隔行,
当它下次调整排列时会将'-'扩展到填充整行.
| Name | Phone | AGE |
|------+-------+-----|
|      |       |     |

*** 创建和转换
<C-c |> 将活动区域(选中区域)转换成一个表.如果第一行至少有一个Tab字符,就用TAB划分内容;如果第一行
都有逗号,就分逗号划分内容;否则就用空白符来划分区域.如果当前没有活动区域就会建立一个空的Org表格.
其实用|Name|Phone|Age <C-c RET>来建表会更简单一点.

*** 调整和区域移动
| C-c C-c | 调整表格,不移动光标                          |
|---------+----------------------------------------------|
| TAB     | 调整表格,将光标移到下一个区域,必要时新建一行 |
| S-TAB   | 调整表格,将光标移到上一个区域                |
| RET     | 调整表格,将光标移到下一行,必要时会新建一行   |
|---------+----------------------------------------------|

*** 编辑行和列
| M-LEFT/RIGHt | 左/右移当前列                                                                          |
|--------------+----------------------------------------------------------------------------------------|
| M-S-LEFT     | 删除当前行                                                                             |
| M-S-RIGHT    | 删除当前行                                                                             |
| M-S-RIGHT    | 在光标位置左边添加一列                                                                 |
| M-UP/DOWN    | 上/下移当前行                                                                          |
| M-S-UP       | 删除当前行                                                                             |
| M-S-Down     | 在当前行上面添加一行.如果有前缀,则在下面添加一行                                       |
| C-c -        | 在当前行下面添加一个水平线.如果带前缀,则在上面添加一行水平线                           |
| C-c RET      | 在当前行下面添加一个水平线.并将光标移动到下一行                                        |
| C-c ^        | 将表排序.当前位置所在的列作为排序的依据.排序在距当前位置最近的两个水平线之间的行中进行 |

* 超链接
就像HTML一样,Org也提供了文件的内部链接,以及到其他文件,新闻组/电子邮件的外部链接等链接格式.

** 链接格式
Org能够识别URL格式的文本并将它们处理成可点击的链接.通常链接格式是这样的:
#+BEGIN_SRC 
[[link][description]] 或者[[link]]
#+END_SRC
链接输入一旦完成(所有的括号都匹配),Org改变它的视图.视野会看到"Description"和"link",而不是
#+BEGIN_SRC 
[[link][description]]
#+END_SRC
和
#+BEGIN_SRC 
[[link]]
#+END_SRC
要想编辑链接,可以光标置于链接上并键入C-c C-l

** 内部链接
如果一个链接地址并不是URL的形式,就会作为当前文件内部链接来处理,最重要的一个例子是:
#+BEGIN_SRC 
[[#my-custom-id]]
#+END_SRC
它会链接到CUSTOM_ID属性是"my-custom-id"的项
类似
#+BEGIN_SRC 
[[My Target]]
#+END_SRC
和
#+BEGIN_SRC 
[[My Target] [Find my target]]
#+END_SRC
的链接,点击后本文件中查找对应的目标"<<My Target>>"

** 4.3 外部链接
Org支持的链接格式包括文件,网页,新闻组,BBDB数据库项,IRC会话和记录.外部链接是URL格式的定位器.
以识别符开头,后面跟着一个冒号,冒号后面不能有空格,下面是一些例子:
#+BEGIN_SRC 
http://www.astro.uva.nl/~dominik    on the web
file://home/dominik/images/jupiter.jps    fil, absolute path
/home/dominik/images/jupiter.jpg          same as above
file:papers/last.pdf                      file,relative path
#+END_SRC

** 4.4 使用链接
Org提供了以下方法来创建和使用链接

| C-c l                 | 在当前位置保存一个链接.这是一个全局命令(你可以设置自己的快捷键),可以在任何类型的缓冲区中使用. |
|                       | 链接保存下来以便插入Org文件中                                                                 |
|-----------------------+-----------------------------------------------------------------------------------------------|
| C-c C-l               | 插入一个链接.穷乡僻壤让你输入,你可以输入一个链接,也可以用上/下键来获取保存的链接              |
|                       | 它还会让你输入描述信息                                                                        |
|-----------------------+-----------------------------------------------------------------------------------------------|
| C-c C-l(光标在链接上) | 当光标牌链接上时,你可以修改链接                                                               |
|-----------------------+-----------------------------------------------------------------------------------------------|
| C-c C-o 或者mouse-1   | 打开链接                                                                                      |
| 或者mouse-2           |                                                                                               |
|-----------------------+-----------------------------------------------------------------------------------------------|
| C-c &                 | 跳回到一个已记录的地址.用C-c %可以将地址记录下来,内部链接后面                                 |
|                       | 的命令也会自动将地址记录下来.使用这个命令多次可以一直往前定位                                 |
|-----------------------+-----------------------------------------------------------------------------------------------|

** 4.5 目标链接
文件链接可以包含一些其他信息使得进入链接时可以到达特定的位置.比如双冒号之后的一个行号.
下面是一些包含搜索定位功能的链接例子以及其说明:
#+BEGIN_SRC 
file:~/code/main.c::255    进入到255行
file:~/xx.org::My Target   找到目录'<<My Target>>'
file:~/xx.org/::#my-custom-id    查找自定义id的项
#+END_SRC

* 5 待办事项
当标题以TODO开头时它就成为了一个TODO项,例如:
#+BEGIN_SRC 
***TODO Write letter to Sam Forture
#+END_SRC

下面是一些使用TODO项的常用命令:
| C-c C-t      | 将当前项的状态在(unmarked) -> TODO -> DONE 之间循环切换,                 |
|              | 同样的切换也可以在时间轴(timeline)和议程(agenda)的缓冲区                 |
|              | 中用t键"远程"进行.                                                       |
|--------------+--------------------------------------------------------------------------|
| S-RIGHT/LEFT | 选择下一个/上一个TODO状态,与上面的循环方式相同                           |
|--------------+--------------------------------------------------------------------------|
| C-c / t      | 在稀疏树中显示TODO项,将Buffer折叠,但是会显示TODO项和它们所在的层次的标题 |
| C-c a t      | 显示全局TODO列表.从所有的议程文件中收集TODO项到一个缓冲区中.             |
| C-c a t      | 显示全局TODO列表.从所有的议程文件中收集TODO项到一个缓冲区中              |
| S-M-RET      | 在当前项下插入一个新的TODO                                               |

改变TODO的状态会触发标签改变.查看选项org-todo-state-tags-triggers的描述获得更多信息.

** 5.2 多状态工作流程
你可以用TODO关键字来定义不再的状态,用以处理项,比如:
#+BEGIN_SRC 
(setq org-todo-keywords
    '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
#+END_SRC
竖起线将TODO关键字(还需要进一步的动作)和DONE状态(不需要进一步的动作)分隔开.
如果你不给出竖起线,最后一个状态会作为DONE状态.设置之后,C-c C-t就会将状态
从TODO转换到FEEDBACK,再转换到VERIFY,最后到DONE和DELEGATED.

有时你可能希望同时使用几个不同的TODO状态集合.例如,你可能想要一个基本的DOTO/DONE,
以及一个修改Bug的工作流程和一个隔开的状态来表示取消的项目(既还是DONE,也不需要进一步
的动作),你可以这样设置:
#+BEGIN_SRC 
(setq org-todo-keywords
    '((sequence "TODO(t)" "|" "DONE(d)")
      (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
      (sequence "|" "CANCELED(c)")))
#+END_SRC
关键字应该各不相同,这样对于一个选项Org才知道该用哪个状态序列(集合).
例子中也给出了快速使用一个关键字的方法,就是在关键字后面括号中给出快捷
字母--当用C-c C-t 时,会询问,让你输入一个字母.要定义只在一个文件中有效的
TODO关键字,可以在文件中任意地方给出下面的文本:
#+BEGIN_SRC 
#+TODO: TODO(t) | DONE(d)
#+TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)
#+TODO: | CANCELED(c)
#+END_SRC
当改变这些行中的一行后,光标仪在改变行上,用C-c C-c让改变生效.

** 5.3进度日志
当你改变一个TODO状态为DONE时,或者当你每次改变一个TODO项的状态时,Org都会自动
记录时间戳或者作一个记录.这是调试可配置的,可以基于每一个关键字进行设置,
并且可以定位到一个文件甚至子树.

*** 完成的项目
最基本的日志功能是跟踪一个特定项目的完成.这可以这样实现:
#+BEGIN_SRC 
(setq org-log-done 'time)
#+END_SRC
这里当你将一个项目从一个TODO(未完成)状态改变为一个完成状态时,标题下面就会插入
一行"CLOSED:[timestamp]".如果你想和时间戳一起作一个记录,用:
#+BEGIN_SRC 
(setq org-log-done 'note)
#+END_SRC

*** 跟踪TODO状态变化
你可能想跟踪TODO状态的变化,可以只记录一个时间戳,也可以为变化作一个带时间戳的
记录.记录会被插入到标题之后形成列表.当有很多记录之后,你可能希望将记录取出放到抽屉
里.通过定制变量org-log-into-drawer可以实现这个功能.对于状态记录,Org可以实现基于
每个状态关键字的设置.实现方法是在每个后的括号中指定"!"(记录时间戳)
或"@"(作为一个记录).例如:
#+BEGIN_SRC 
#+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)
#+END_SRC
将会设置TODO关键字和快速访问字母.以及当一个项目设为DONE时,会记录时间戳,
当状态变为WAIT或CANCELED时,会作一个记录.这个语法也适用于变量org-todo-keywords.

** 5.4 优先级
如果你广泛地使用Org模式,这样你就会有大量的TODO项.给它们设定优先级就很有必要.可以在任何类型的缓冲区中使用TODO
项的标题中加入一些标记(cookie)来设置它们的优先级,像这样:
#+BEGIN_SRC 
*** TODO [#A] Write letter to Sam Fortune
#+END_SRC
Org模式支持三个优先级:'A', 'B', 'C'. 'A'是最高级别,如不指定,'B'是默认的,优先级只有议程中有用.

| C-c ,  | 设置当前标题的优先级.按^^^选择一个级别,或者SPC删除标记(cookie) |
|--------+----------------------------------------------------------------|
| S-UP   |                                                                |
|--------+----------------------------------------------------------------|
| S-Down | 增加/减少当前标题的优先级                                      |

** 5.5 任务细分
很多时候将一个大的任务分成几个易于完成的小任务是明智的.你可以通过在TODO项目下新建一个大纲树,
并在子树上标记子任务来实现这个功能.为了能对已经完成的任务有个大致的了解,你可以在标题的任何地方
插入'[/]'或者'[%]'.当每个子任务的状态变化时,或者当你在标记上按C-c C-c时,这些标记状态也会随之更新
例如:
#+BEGIN_SRC 
* Organize Party [33%]
** TODO Call people [1/2]
*** TODO Peter
** Done Sarah
** TODO Buy food
** DONE Talk to neighbor
#+END_SRC

** 5.6 复选框
当纯文本中的项以'[]'开头时,就会变成一个复选框.复选框不会包含在全局TODO列表中,
所以它们很适合地将一个任务划分成几个简单的步骤.下面是一个复选框的例子:
#+BEGIN_SRC 
* TODO Organize party [1/3]
  - [-] call people [1/2]
    - [ ] Peter
    - [X] Sarah
  - [X] Order food
  - [ ] think about what music to play
#+END_SRC
* TODO Organize party [1/3]
  - [-] call people [1/2]
    - [ ] Peter
    - [X] Sarah
  - [X] order food
  - [ ] think about what music to play
复选框是分层工作的.所以如果一个复选框项目如果还有子复选框,触发子复选框将会使该复选框变化
以反映出一个,多个不服务复选框被选中.

下面是处理复选框的命令:
| C-c C-c | 触发复选框的状态或者(加上前缀)触发复选框的存在状态         |
|---------+------------------------------------------------------------|
| M-S-RET | 增加一个带有复选框的项.这只在光标处纯文本列表项中才起作用. |
|---------+------------------------------------------------------------|

* 6 标签
要为交叉相关的信息提供标签和上下文,一个不错的方法是给标题分配标签,Org模式能够广泛地支持标签.
每一个标题才能包含多个标签,它们位于标题的后面.标签可以包含字母,数字,'_'和'@'.
标签的前面和后面都应该有一个冒号,例如, ":work" 可以指定多个标签,就像":work:urgent:"
 标签默认是粗体,并和标题具有相同的颜色.

** 6.1标签继承
标签具有大纲树的继承结构.如果一个标题具有某个标签,它的所有标题也会继承这个标签.例如:在列表
#+BEGIN_SRC 
* Metting with the French group :work:
** Summary by Frank             :boss:notes:
*** TODO Perpare slides for him :action:
#+END_SRC
中,尽管没有明确标出,最后一个标题会有标签":work:",":boss:", ":note:",和":action:".
你也可以设定一个标签让所有的标题都继承,就好像标签在包含整个文件的第0级标题中指定了一样.
用下面的方法:
#+BEGIN_SRC 
#+FILETAGS: :Peter:Boss:Secret:
#+END_SRC

** 6.2设置标签                                                         :test:
在标题后可以很容易地输入标签.在冒号之后,M-TAB可以实例标签.也有一些专门的命令用于输入标签:
| C-c C-q | 为当前标题输入标签.Org模式即支持实例,也支持单键接口来设置标签,            |
|         | 回车标签会被插入,并放到第org-tags-column列.如果用前缀C-u,会把当前缓冲区中 |
|         | 所有的标签都对齐到那一列,                                                 |
|---------+---------------------------------------------------------------------------|
| C-c C-c | 当光标牌标题上时,这个命令同C-c C-q                                        |
Org支持基于一个标签列表来插入标签.默认情况这个列表中动态构建的,包含了当前缓冲区中使用过的所有
标签.你可以通过变量org-tag-alist在全局设定一个标签的硬列表(hard list).
另外,对于某个特定文件你也可以用下面这几千设置一个默认列表:
#+TAGS: @work @home @tennisclub
#+TAGS: laptop car pc sailboat
默认Org模式用一个迷你缓冲区实例设施来输入标签.另外,它也实现了一个更快速,
称为快速标签选择的标签选择方法.这使得你只能按一次键就可以选择或者取消一个标签.
为了使它能更好地工作需要为常用的标签赋唯一的值.你可以在你的".emacs"
文件中通过设置变量org-tag-alist作全局设定.例如:如果你需要在不同的文件中经常要给条目
添加标签":@home:",这里你就可以像这样设置:
#+BEGIN_SRC 
(setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))
#+END_SRC
如果标签只用于当前正在处理的文件,那么你可以这样设置标签选项行:
#+TAGS: @work(w) @home(h) @tennisclub(t) laptop(l) pc(p)

** 6.3 标签查找
一旦标签体系设置好,就可以用来收集相关联的信息到指定列表中.
| C-c \   | ---                                                                             |
|---------+---------------------------------------------------------------------------------|
| C-c / m | 用匹配标签搜索的所有标题构造一个稀疏树.带前缀参数C-u时,忽略所有还是TODO行的标题 |
| C-c a m | 用所有议程文件匹配的标签构造一个全局列表                                        |
| C-c a M | 用所有议程文件匹配的标签构造一个全局列表,但只搜索TODO项,并强制搜索所有子项      |
|---------+---------------------------------------------------------------------------------|

这些命令都会提示输入字符串,字符串支持基本的逻辑处理.像"+boss+urgent-project1",是搜索所有的包
含标签"boss"和"urgent"但不含"project1"的项;而"Kathy|Sally",搜索标签包含"Kathy"或者"Sally"项.
搜索字符串的语法很厘定,支持查找TODO关键字,条目级别和属性.

* 7 属性
属性是一些与条目关联的键值对.它们位于一个名为PROPERTIES的特殊抽屉中.第一个属性都单独一行,
键在前(被冒号包围),值在后:
 
* CD collection
** Classic
*** Glodberg Variations
    :PROPERTIES:
    :Title:     Goldberg Variations
    :Composer:  J.S. Bach
    :Publisher: Deutsche Grammophon
    :NDisks:    
    :END:
通过设置属性"Xyz_All:", 你可以为属性":Xyz:"设置所有合法的值.这个特定的属性是有继承性的,
即如果你是在第一级别设置的,那么会被应用于整个树,当合法的值设定之后,设置对应的属性就很容易了,
并且不容易出现打字错误.用CD唱片集为例,我们可以预定义发行商和盒中的光盘数目:
* CD collection
  :PROPERTIES:
  :NDisks_All: 1 2 3 4
  :Publisher_All: "Deutsche Grammophon" Philips EMI
  :END:
也可以在全局设置org-global-properties,或者在文件级别设置:
#+PROPERTY: NKisks_ALL 1 2 3 4
| C-c C-x p | 设置一个属性,会询问属性名和和属性值 |
|-----------+-------------------------------------|
| C-c C-c d | 从当前项中删除一个属性              |
要基于选择的属性创建稀疏树或者特殊列表,跟标签搜索的命令相同.
搜索字符串的语法在第10.3.3节中详述

** 7.1 扩展阅读
略

* 8日期和时间
为了支持工程的计划,TODO项可以标记上日期和/或时间.带有日期和时间信息的特定格式的字符串在
Org模式中称为时间戳
** 8.1 时间戳
时间戳是一个具有特定格式的日期(可能带有时间和时间段)说明,例如~ 2005-10-01~ Tue, 
~ 2003-09-16~ Tue 09:39,或者~2003-09-16~ Tue 12:00-12:30.
时间戳可以出现在树条目的标题和正文的任何地方.它能使条目只在特定的日期才出现在议程列表中.

*** 普通时间戳;事件;约会
一个简单的时间戳只是给一个条目加上时间和日期.这跟在绝技的议程上写下约会和事件是一样的.
* Meet Peter at the movies <2018-07-18 Wed 20:00>
* Discussion on climate change <2016-11-02 Thu 20:00-22:00>

*** 具有时间间隔的时间戳
一个时间戳可以包含一个时间间隔,表示事件不只在指定的时间发生,还在每隔一个特定的时间如N天(d),
周(w),月(m)或者年(y)之后重复发生.下面的事件每周二在议程中显示:
* Pick up Sam at school <2007-05-16 Wed 12:30 +1s>

*** 日记样式的sexp条目
为了能定义更很杂的时间,Org模式支持Emacs日历/日记包(Calendar/Diary package)中的日记条目.
例如:
* The nerd metting on every 2nd Thursday of the month of the month
  <%%(diary-float t 4 2>

*** 时间/日期段
两个时间戳用'-'连接起来就定义了一个时间段
** Metting in Amsterdam
   <2004-08-23 Mon>--<2004-08-26 Thu>

*** 非激活的时间戳
跟普通时间戳一样,但是这里是方括号而不是尖括号.这种时间戳是未激活的,
它不会让一个条目显示在议程中,
* Gillian comes late for the fifth time [2006-11-01 Wed]

** 8.2 创建时间戳
时间戳要有特定的格式,这样才能被Org模式识别.
下面的命令可以用来正确地处理时间戳的格式
| C-c .        | 询问日期并输入正确的时间戳.当光标处理一个时间戳之上时,是修改这个时间戳,         |
|              | 而不是插入一个新的.如果这个命连用多次,就会插入一个时间段.加上前缀会附带当前时间 |
|--------------+---------------------------------------------------------------------------------|
| C-c !        | 功能同C-c.,但是插入的是一个未激活的时间戳                                       |
|--------------+---------------------------------------------------------------------------------|
| S-LEFT/RIGHT | 将光标处理的时间戳改变一天                                                      |
|--------------+---------------------------------------------------------------------------------|
| S-Up/Down    | 改变时间戳中光标下的项.光标可以处在年,月,日,时或者分之上.当时间戳包含一个       |
|              | 时间段时,如:"15:30-16:30",修改第一个时间,会自动同时修改第二个时间,以保持        |
|              | 时间段长度变.想修改时间段长度,可以修改第二个时间.                               |
|--------------+---------------------------------------------------------------------------------|
当Org模式询问时间/日期时,能接收任何包含时间和/或日期的字符串,
它能根据当前的时间日期智能地分析字符串,从而得到没有指明的信息.你也可以用弹出的日历中选择日期.
想完整地了解时间/日期询问的工作方式,可以参考手册.

** 8.3 截止期限和计划安排
时间戳前面可以加一些关键字来协助计划安排.

*** 截止期限
意义:任务(大多数情况都会是一个TODO项,当然也可以不是)应该完成的日期.
| C-c C-d | 在标题下面一行插入一个带有"DEADLINE"关键字的时间戳 |
在截止日期,任务会列在议程中.另外,今天的议程会在任务到期orgdeadline-warning-days天前对即将到期
以及已经过期的任务给出提醒,直到任务被标记为DONE.例如:
*** TODO write article about the Earch for the Guide 
    The editor in charge is bbdb:Ford Prefect
    DEADLINE: <2018-07-17 Tue>
有些任务需要一再重复出现.Org模式在截止期限,计划安排和普通时间戳中用所谓的中继器来管理这种
任务.在下面的例子中:
** TODO Pay the rent
   DEADLINE:<2005-10-01 Sat +1m>
+1m 是一个中继器;上面的意思是任务有一个截止期限~2005-10-01~,并从这个日期开始每月都重复出现.

** 8.4 记录工作时间
使用Org可以记录在一个工程中花在某些特定任务上的时间.
| C-c C-x C-i | 开始当前条目的计时(clock-in).这会插入一个Clock关键字和一个时间戳.加上C-u              |
|             | 前缀,从当前已经计时的任务中选择任务.                                                  |
|-------------+---------------------------------------------------------------------------------------|
| C-c C-x C-o | 停止计时(Clock-out).这会在开始计时的地方插入另一个时间戳.它会直接计算使用             |
|             | 时间并插入到时间段的后面如:"=> HH:MM".                                                |
|-------------+---------------------------------------------------------------------------------------|
| C-c C-x C-x | 取消当前的计时..当你误操作打开一个计时器时, 或者转而却做其他事情时,这个命令就会很有用 |
| C-c C-x C-j | 跳转到包含当前正在运行的计时的任务条目.用C-uf前缀从当前计时的任务中选择               |
| C-c C-x C-r | 在文件插入一个包含像Org表格一样的计时报告的动态块.当光标正处于一个存在的块上时,更新它 |
| C-c C-c     | 在一个已经存在的计时表格之上时,更新它.动态块.光标需要置于动态块#+BEGIN这行.           |
|-------------+---------------------------------------------------------------------------------------|
/键可能会在时间轴和议程中使用来查看一天中处理和关闭了哪些任务.

* 9 捕获--转发--存档
任何组织系统都有一个重要功能,就是能捕获新的灵感或者任务,并将相关的引用材料与之联系起来.
Org提供了一个捕获过程来创建任务.它将与一个任务相关的文件(附件)保存在一个特定的目录下.
在系统中,任务和项目经常移动.将整个项目树保存到一个归档文件中可以保持系统简洁快速.

** 9.1 捕获
Org的获取一个新条目的方法很大程度上受John Wiegley的Excellent remember package
的影响.它使得你可以在工作流程中断一小会儿来存贮一个简短的笔记.
Org可以为新条目定义模板,并将它们与不同的目标文件关联起来以保存笔记.

*** 设定截取位置
下面的定制为笔记设置了一个默认的目标文件,并为捕获新的任务定义了一个全局快捷键.
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)

*** 截取的使用
| C-c c   | 启动一个捕获过程.进入一个窄的间接缓冲区来编辑条目                 |
|---------+-------------------------------------------------------------------|
| C-c C-c | 一旦完成捕获信息的输入,可以用C-c C-c返回之前的窗口,继续中断的工作 |
|---------+-------------------------------------------------------------------|
| C-c C-w | 将条目保存到一个接收地址并结束                                    |
|---------+-------------------------------------------------------------------|
| C-c C-k | 取消捕获过程,返回之前的状态                                       |
|---------+-------------------------------------------------------------------|

*** 捕获模板
用可以用不同的模板来做不同的捕获笔记,并将它们保存到不同的地方.
例如,你想将新任务保存到文件"TODO.org"的"TASK"标题下,而将上房项目保存到"journal.org"
中一个时间树中.你可以:
#+BEGIN_SRC 
(setq org-capture-templates
    '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
       "* TODO %?\n %i\n %a)
       "j" "Journal" entry (file+datetree "~/org/journal.org")
       "* %?\nEntered on %U\n %i\n %a")))
#+END_SRC
其中,第一个字符串是模式的关键字,第二个字符串是简短的描述信息.
接着是条目的类型和保存笔记的目标地址.最后是模板本身,它利用%作为
黑底符基于时间和上下文来填充一些信息.

当你调用M-x org-capture时,Org提示输入一个键来选择模板(如果你有多个模板),然后
就会给出像这样的内容:
#+BEGIN_SRC 
* TODO
  [[file:link to where you were when initiating capture]]
#+END_SRC
在扩展模板时,可以用%转义符进行动态地插入内容.下面是一些可以使用的项,
查看手册获得更多的选项.
| %a     | 注解,通常是由org-store-link创建的链接 |
|--------+---------------------------------------|
| %i     | 初始化内容,当记忆时区域被C-u调用      |
|--------+---------------------------------------|
| %t     | 时间戳,只是日期                       |
|--------+---------------------------------------|
| %T     | 带有日期和时间的时间戳                |
|--------+---------------------------------------|
| %u, %U | 同上,但是时间戳不激活                 |
|--------+---------------------------------------|

** 9.2转送笔记
当你回顾捕获的数据时,可能想把其中的一些条目转送到另一列表中,
比如说到五工程项目.剪切,查找正确的地址,然后再粘贴笔记,这就似乎有些麻烦.
为了简化这个过程,可以用专门的命令:
| C-c C-w         | 转送光标处的条目或者区域.这个命令会提供一些目标地址供选择,       |
|                 | 你可以通过实例功能选择一个,条目就会作为一个子项填充到目标标题下  |
|                 | 默认情况下,当前缓冲区的一组标题会被作为转送的目标,你可以通过设置 |
|                 | 给出跨多个文件的复杂的定义                                       |
|-----------------+------------------------------------------------------------------|
| C-u C-c C-w     | 借助于转送功能的接口来跳转到一个标题                             |
|-----------------+------------------------------------------------------------------|
| C-u C-u C-c C-w | 跳转到org-refile最后转送子树所致的地方.                          |
|-----------------+------------------------------------------------------------------|

** 9.3归档
当一个用(子)树表示的工程完成后,你可能想把它移走,不让它再在议程里显示.归档能使
你的工作文件变得简洁,并能使议程视图构造等全局搜索保持高效.最常用的归档命令是
将工程树移到另一个文件--归档文件.
| C-c C-x C-a | 用变量orgarchive-default-command 指定的命令归档当前的项 |
|-------------+---------------------------------------------------------|
| C-c C-x C-s | 将光标处的子树归档到org-archive-location指定的位图      |
| 或者C-c $   |                                                         |
|-------------+---------------------------------------------------------|
默认的归档位置是当前文件同目录下,名为当前文件名后加"_archive"的文件.
例子和设置位置的方法见变量org-archivelocation的帮助信息.下面是一个在
缓冲区内设置该变量的方法:
#+BEGIN_SRC 
#+ARCHIVE: %s_done::
#+END_SRC

** 10.议程视图
根据Org的工作方式,TODO项,时间戳和带标签的标题分散在一个或者多个文件中,
为了能够查看某一天的项目或者事件,信息必须收集在一起,以一种有条理的
方式排序,显示.有几种不同的视图,收集的信息在一个专门的议程缓冲区中显示.
这个缓冲区是只读的,但是提供了一些命令可以访问原Org文件中对应的条目,
并且可以远程地编辑这些文件.从议程缓冲区中远程编辑来说,比如,你可以在议程
缓冲区中改变标题和约会的日期.议程缓冲区中使用的命令会在第10.4节列出.

*** 10.1议程文件
显示的信息通常是从各个议程文件中收集来的,这样文件在变量org-agenda-files中列出.
| C-c [ | 将当前文件加入到议程文件列表中,当前文件会被加到列表的前面.如果文件已经 |
|       | 在列表中,会被移到前面.带有前缀时,文件添加/移除到后面                   |
|-------+------------------------------------------------------------------------|
| C-c ] | 将当前文件从议程文件列表中删除                                         |
|-------+------------------------------------------------------------------------|
| C-,   | 遍历议程文件列表,依次访问其中的每一个文件.                             |
|-------+------------------------------------------------------------------------|

*** 10.2议程调试器
视图是通过议程调试器创建的,通常我们会给它设置一个全局快捷键--比如 C-c a
按C-c a之后,就会提示再输入一个字母来对应的命令:
| a   | 日历式的议程                              |
|-----+-------------------------------------------|
| t/T | TODO项的列表                              |
|-----+-------------------------------------------|
| m/M | 匹配某个标签表达式的标题的列表            |
|-----+-------------------------------------------|
| L   | 当前文件的时间轴视图                      |
|-----+-------------------------------------------|
| s   | 通过关键字和/或正则表达式选中的条目的列表 |
|-----+-------------------------------------------|

*** 10.3内建议程视图
**** 10.3.1周/日议程
周/日议程就像绝技的议程一样,用以显示本周或当天的所有任务.
| C-c a a | 从一列Org文件中为本周收集出一个议程.议程显示出每天的条目 |
|---------+----------------------------------------------------------|
Emacs包含了Edward M. Reingold的日历和日记功能.Org模式能识别日记的
语法并允许在Org文件中直接使用日记的sexp条目:
#+BEGIN_SRC 
* Birthdays and similar stuff
#+CATEGORY: Holiday
  %%(org-calendar-holiday) ; special function for holiday names
#+CATEGORY: Anna
  %%(diary-anniversary 5 14 1956) Arthur Dent is %d years old
  %%(diary-anniversary 10 2 1869) Mahatma Gandhi would be %d years old
#+END_SRC
Org可以跟Emacs的约会提醒功能结合.想添加议程文件中的约会提醒,可以使用命令:
org-agenda-to-appt.

**** 10.3.2全局TODO列表
全局TODO列表将所有未完成的TODO项格式化并集中到一片.TODO项的远程编辑使得我们
只用按一下键就可以改变TODO项的状态.TODO列表中可以使用的命令在第10.4节给出.
| C-c a t | 显示全局TODO列表.这会从所有的议程文件中收集TODO项到一个缓冲区中. |
|---------+------------------------------------------------------------------|
| C-c a T | 同上,但是可以选择TODO                                            |
|---------+------------------------------------------------------------------|

**** 10.3.3匹配标签和属性
如果议程文件中的标题带有标签或者带有属性,就可以基于这些无数据筛选标题到议程
缓冲区中.这里描述的匹配语法在用C-c / m创建稀疏树也同样适用.在标签列表中可以
使用的命令在第10.4节描述.
#+BEGIN_SRC 
C-c a m 将匹配指定的标签集的所有标题生成一个列表.这个命令访问筛选规则,
可以是标签的逻辑表达式,如"+work+urgent-withboss"或"work|home"(见第6章).
如果你经常使用某个搜索,可以将它定义成一个命令(见10.2节)

C-c a M 同C-c a m,但只筛选同时也是TODO项的标题.
#+END_SRC

匹配语法
搜索字符串可以使用'&'作与运算,'|'作或运算.'&'的约束力比'|'的强.
括号功能现在还没有实现.用以搜索的元素可以是标签,匹配标签的正则表达式,
或者像PROPERTY OPERATOR VALUE这样带有比较操作符的用来比较属性值 的表达式.
第一个元素前面加'-'表示不选匹配的项,加'+'表示选择匹配的项.使用'+'和'-'
时,与操作符'&'就是可选的了,这里有一些只使用标签的例子.
#+BEGIN_SRC 
"+work-boss"      选择标有":work:"的标题,但去掉同时也有":boss:"的标题
"work|laptop"     选择标有":work:"或者":laptop:"的行.
"work|laptop+night" 跟前面相同,但要求标有":laptop:"和行也要标有":night:".
#+END_SRC
匹配标签时你也可以尝试同时匹配属性,详细内容见手册.

**** 10.3.4单文件时间轴
时间轴用时间排序视图概述单个文件中的所有带有时间戳的条目.这个命令的目的是
用来给出一个工程中事件的鸟瞰图
#+BEGIN_SRC 
C-c a L
给出Org文件中所有带时间戳条目的排序视图.带有C-u前缀时,没有完成的TODO项(作
了安排的以及没有做安排的)也列在当前日期下.
#+END_SRC

**** 10.3.5查找视图
这个议程视图用来对Org模式下的条目进行普通的文本查找.对于查找笔记很有用.
#+BEGIN_SRC 
C-c a s      这个查找方式可以让你通过匹配子串或者用逻辑表达式指定关键字来选择条目
#+END_SRC

*** 10.4议程缓冲区的命令
议程缓冲区中的条目链接到了它们的源Org或者日记文件.有一些命令可以用来显示
和跳转到条目的源位置,也可以从视图缓冲区中"远程"编辑源文件.下面只是所有命令
的一个选集.
动作:
| n | 下一行(同DOWEN和C-n |
|---+---------------------|
| p | 上一行(同UP和C-p    |
|---+---------------------|

查看/转到Org文件
| mouse-3 |                                                                            |
|---------+----------------------------------------------------------------------------|
| SPC     | 在另一个窗口中显示条目的源位置.带前缀使得整个条目在大纲中可见,而不只是标题 |
|---------+----------------------------------------------------------------------------|
| TAB     | 在另一个窗口中条目的源位置.在Emacs22之前的版本,mouse-1也有这个功能         |
|---------+----------------------------------------------------------------------------|
| RET     | 转到条目的源位置并删除其他的窗口                                           |
|---------+----------------------------------------------------------------------------|

改变显示方式:
| o              | 删除其他的窗口                                                                                                                    |
|----------------+-----------------------------------------------------------------------------------------------------------------------------------|
| d/w            | 切换到日周视图                                                                                                                    |
|----------------+-----------------------------------------------------------------------------------------------------------------------------------|
| f和b           | 时间或者白平衡来显示随后的org-agenda-current-span天.例如,如果显示了一周的内容,切换到下/上周                                       |
|----------------+-----------------------------------------------------------------------------------------------------------------------------------|
| .              | 转到今天                                                                                                                          |
|----------------+-----------------------------------------------------------------------------------------------------------------------------------|
| j              | 询问日期并转到那天                                                                                                                |
|----------------+-----------------------------------------------------------------------------------------------------------------------------------|
| v l或者简化的I | 触发日志模式(Logbook mode).在日志模式中,当记录功能打开(变量org-log-done)时标记为DONE的条目,以及在那天计时的条目,都会显示在议程中. |
|----------------+-----------------------------------------------------------------------------------------------------------------------------------|
| r或g           | 重新构造议程,以反映最新的状态                                                                                                     |
|----------------+-----------------------------------------------------------------------------------------------------------------------------------|
| s              | 保存当前Emacs会话的所有Org缓冲区和ID的地址                                                                                        |
|----------------+-----------------------------------------------------------------------------------------------------------------------------------|

二级筛选和查询编辑
| / | 根据标签过滤当前的缓冲区,提示你输入一个字母选择一个标签.先按'-'排除一个标签 |
|---+-----------------------------------------------------------------------------|
| \ | 通过增加条件缩小当前议程的视图                                              |
|---+-----------------------------------------------------------------------------|

远程编辑(参考手册获得更多命令)
| 0-9                | 数字参数                                                                            |
|--------------------+-------------------------------------------------------------------------------------|
| t                  | 修改议程和org文件中的条目和TODO状态                                                 |
|--------------------+-------------------------------------------------------------------------------------|
| C-k                | 删除当前的议程条目以及源文件中它的整个子树                                          |
| C-c C-w            | 传送当前的条目                                                                      |
| C-c C-x C-a或简作a | 用在org-archive-default-command中设置的默认归档命令对当前的条目对应的整个树进行归档 |
| C-c C-x C-s或简作$ | 归档当前标题对应的树                                                                |
| C-c C-s            | 规划(Schedule)一个条目,带有前缀参数时删除规划时间戳                                 |
| C-c C-d            | 为条目设置截止期限,带前缀时删除截止期限                                             |
| S-Right和S-LEFT    | 将与当前行相关的时间戳改变一天                                                      |
| I                  | 对当前条目开始计时                                                                  |
| O/X                | 暂停/取消最近开始的计时                                                             |
| J                  | 在另一个窗口中跳转到正在进行的计时                                                  |

** 10.5定制议程视图
自定义搜索的主要用途是对于频繁使用的搜索进行快捷键绑定,从而快捷地创建议程缓冲区或者
稀疏树(当然后者只涵盖当前缓冲区的内容).自定义的命令是用变量org-agenda-custom-commands来
配置的.你可以用C-c a C来定制这个变量.也可以直接在".emacs"中用Emacs lisp来设置.下面的例子
包含了所有合法的搜索类型:
#+BEGIN_SRC 
(setq org-agenda-custom-commands
     '(("w" todo "WAITING")
       ("u" tags "+boss-urgent")
       ("v" tags-todo "+boss-urgent")))
#+END_SRC
每个项的首字符串是使用调试器命令C-c a之后要给出的键以使用相应的命令.通常都是单个字符.
第二个参数是搜索类型,接着是用来进行匹配的字符串或者正则表达式.上面的例子定义了:
| C-c a w | 对于包含关键字""的TODO项的全局搜索                           |
|---------+--------------------------------------------------------------|
| C-c a u | 对于带有标签":boss:"而不含标签":urgent:"的标题的全局标签搜索 |
|---------+--------------------------------------------------------------|
| C-c a v | 同搜索C-c a u,但是搜索范围只限于同时也是TODO项的标题         |
|---------+--------------------------------------------------------------|

* 11.准备导出
当导出Org模式的文档时,导出器在后端尽可能准确地反映出文档的结构.由于所要导出的目标文档像HTML,LaTeX和DocBook具有丰富的格式,
Org为富导出(Rich Export)提供了一些规则.这节概述了Org模式缓冲区中的准备规则.
** 11.1结构的组成元素
文档标题
导出文件的标题在特定行给出:
#+BEGIN_SRC 
#+TITLE: This is the title of the document
#+END_SRC
*** 标题和章节
第二章描述的大纲结构确定了导出文档的结构基础.然而由于大纲结构也用于列表和任务,
因此只有前三个级别用作标题.更深的级别会被看作项目列表.你可以通过变量
org-export-headline-levels在全局设置这个开头,或者只是在单个文件中设置:
#+BEGIN_SRC
#+OPTIONS: H:4
#+END_SRC

*** 目录表
目录表通常会直接插入在文档第一个标题之前.
#+BEGIN_SRC 
#+OPTIONS:toc:2    (目录中只显示二级标题)
#+OPTIONS:toc:nil  (无目录)
#+END_SRC

*** 段落/分行和引用
段落之间至少要有一空行.如果你想实现段内分行,可以在行后加上"\\"
要想在一个区域实现分行,而其他使用正常格式,你可以使用下面的构造,
它也可以用来实现诗歌的格式:
#+BEGIN_SRC 
 Great clouds overhead
 Tiny black birds rise and fall
 snow covers Emacs
     -- AlexSchroeder
#+END_SRC
当从另外一个文档中引用一段话时通常会让它左右都缩进.在Org文档中可以这样作引用.
#+BEGIN_SRC 
Everything should be made as simple as possible,
but not any simpler -- Albert Einstein
#+END_SRC
如果你想让某些文本居中,可以这样:
#+BEGIN_SRC 
Everything should be made as simple as possible, \\
but not any simpler
#+END_SRC

*** 强调和等宽
你可以让文字粗体,斜体,下划线,代码,以及逐文本,如果必需,也可以'划掉'.
代码和逐文本的字符串不会以Org模式的语法格式来处理,会被逐字输出.想要插入一个水平格
尺,用一个只含有破折号的行来实现,要求至少有5个破折号.

*** 注释行
以'#'位于第0列的行会被看作注释,不会被导出.如果你想要一个缩进的行也被作为注释,
用"#+"开头.另外以关键字"COMMENT"开头的子树整个树都不会被导出.最后,
被"#+BEGIN_COMMENT "..." #+END_COMMENT"包围的整个区域也都不会被导出.
| C-c ; | 在一个项的开头触发COMMENT关键字 |

** 11.2图片和表格
对于Org模式的表格,以竖起线开头的行会成为表格的首行.你可以在表格前面用下面几行为
表格指定标题和标签,以方便交叉引用,在文本中可以用\ref{tab:basic-data}来引用它:
#+BEGIN_SRC 
#+CAPTION: This is the caption for the next table (or link)
#+LABEL: tbl:basic-data
| ... | ...|
|-----+----|
#+END_SRC
一些后端(HTML,LATEX,以及DocBook)允许直接插入图片到导出的文档中,Org也可以,只要图片
的链接不含有描述部分就行了,例如:
#+BEGIN_SRC 
[[./img/a.jpg]]
#+END_SRC
如果你希望为图片定义一个标题,或者一个标签方便内部交叉引用,可以让图片单独一行,
在前面加上:
#+BEGIN_SRC 
#+CAPTION: This is the caption for the nexd figure link (or table)
#+LABEL: fig:SED-HR4049
[[./img/a.jpg]]
#+END_SRR
你也可以为图形指定一些其他的特性,但是由于这与后端密切相关,可以参考关于特定后端的
章节获得详细信息.

** 11.3纯文本的例子
你可以包含进来一些纯文本的例子,这不属于准备的范畴.这些例子会等宽排版,所以适用于代码
以及其他类似的情况:
#+BEGIN_SRC 
#+BEGIN_EXAMPLE
Some example from a text file
#+END_EXAMPLE
#+END_SRC
为了化,一些小型的例子也可以将各行以冒号开头.冒号前面可以有空格:
#+BEGIN_SRC 
Here is an example
: Some example from a text file.
#+END_SRC
对于一些程序设计语言的源代码以及一些其他的文本,可以被Emacs的字体锁(Font-lock)
特殊标记,你也可以让它们像在Emacs的缓冲区中那样显示:
#+BEGIN_SRC 
#+BEGIN_SRC emacs-lisp
(defun org-xor  (a b)
    "Exclusive or."
    (if a (not b) b))
.#+END_SRC
#+END_SRC
为了能在支持这种语言的专门的缓冲区中编辑例子,可以用C-c,启动和退出编辑缓冲区.

** 11.4包含文件
当导出文档时,你可以包含其他文件中的内容,比如,想包含你的".emacs"文件,你可以用:
#+BEGIN_SRC 
#+INCLUDE: "~/.emacs" src emacs-lisp
#+END_SRC
可选的第二个第三个参数是组织方式(例如,"quote", "example",或者"src"),如果是"src",
语言用来格式化内容.组织方式是可选的,如果不给出,文本会被当作Org模式的正常处理.用
C-c,可以访问包含的文本.

** 11.5嵌入LaTex
对于需要包含数学符号和特殊方程的科学笔记,Org模式支持嵌入LaTeX代码到文件中.你可以
直接使用类TeX的宏来输入特殊符号,输入方程,或者整个LaTeX,或者整个LaTeX.
#+BEGIN_SRC 
Angles are written as Greek letters \alpha, \beta and \gamma. The mass if the
sun is M_sun = 1.989 x 10^30 kg.The radius of the sun is R_{sun} = 6.96 x 10^8 m.
If $a^2=b$ and $b=2$, then the solution must be either $a=+\sqrt{2}$ or $a=-\sqrt{2}$.

\begin{equation}
x=\sqrt{b}
\end{equation}
#+END_SRC
特殊设置之后,导出HTML时LaTeX代码片断会生成图片并包含进来.

* 12导出
Org模式文档可以导出成多种格式:ASCII用于包含在邮件中;HTML用来发布到网页上;
LaTeX/PDF用来打印出漂亮的文档;DocBook通过DocBook工具转换成其他各种各样的
格式.也可以导出成iCalendar格式,将计划信息并入到桌面日历中.
** 12.1 导出选项
导出器能识别缓冲区中提供信息的特殊行.这样行可以放在文件中, 的任何地方.整个集合
可以用C-c C-e t插入到缓冲区中.
| C-c C-c t | 插入导出选项模板,见下面的例子 |
#+BEGIN_SRC 
#+TITLE:      The Title To Be Shown (Default Is The Buffer Name)
#+AUTHOR:     The author (default taken from user-full-name)
#+DATE:       a date, fixed, of a format string for format-time-string
#+EMAIL:      His/her email address (default form user-mail-address)
#+DESCRIPTION:The Page description, e.g. for the XHTML meta tag
#+KEYWORDS    The page keywords, e.g. for the XHTML meta tag
#+LANGUAGE:   Language for HTML, e.g. 'en' (org-export-default-language)
#+TEXT:       Some descriptive text to be inserted at the beginning.
#+TEXT:       Several lines may be given.
#+OPTIONS:    H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t Text ...
#+LINK_UP:    The ''up'' link of an exported page
#+LINK_HOME:  The ''home'' link of an exported page
#+LATEX_HEADER:Extra line(s) for the LaTeX header, like \usepackage{xyz}
#+END_SRC

** 12.2 导出调试器
所有的导出命令都可以通过导出调试器来使用,调试器是一个前缀快捷键,它会提示输入
一个字母来指定命令.通常整个文件都会被导出,但是如果选中区域包含大纲树,就会导出
大纲树,并以第一个标题作为文件标题
| C-c C-e | 用来导出和发布的调试器 |

** 12.3 ASCII/Latin-1/UTF-8的导出
ASCII导出功能能给Org文件提供一个简单易读的版本,它只包含纯ASCII文本.Latin-1和
UTF-8导出用它们能编码的特殊字符扩展了文件的功能.
| C-c C-e a            | 导出ASCII文件                      |
|----------------------+------------------------------------|
| C-c C-e n和C-c C-e N | 和上面的命令一样,但是用Latin-1编码 |
|----------------------+------------------------------------|
| C-c C-e u和C-c C-e U | 和上面的命令一新,但是用UTF-8编码   |
|----------------------+------------------------------------|

** 12.4 HTML的导出
| C-c C-e h | 导出HTML文件               |
|-----------+----------------------------|
| C-c C-e b | 导出HTML文件并用浏览器打开 |
|-----------+----------------------------|
想要将HTML以纯文本方式导出文件,可以:
#+BEGIN_SRC 
#+HTML:Literal HTML Code for export
#+END_SRC
或者
#+BEGIN_SRC 
#+BEGIN_HTML
All lines between these markers are exported literally
#+END_HTML
#+END_SRC

** 12.5LaTeX和PDF的导出
| C-c C-e l | 导出LaTeX文件                      |
|-----------+------------------------------------|
| C-c C-e p | 导出LaTeX文件,并处理成PDF文件      |
|-----------+------------------------------------|
| C-c C-e d | 导出LaTeX文件,处理成PDF文件,并打开 |
|-----------+------------------------------------|
默认,LaTeX输出是使用Article类型.但是你可以在文件中通过选项#+LaTeX_CLASS:myclass
来改变,但是类型必须是org-export-latex-classes中列出的.
第11.5节撰述的内嵌的LaTeX可以正确地插入到LaTeX文件中.跟HTML导出器相似,也可以通过
#+LaTeX:和#+BEGIN_LaTeX ... #+END_LaTeX来加入纯文本的LaTeX代码.

** 12.6 DocBook的导出
| C-c C-e D | 导出DocBook文件 |
跟HTML导出器相似,也可以通过#+DocBook:和#+BEGIN_DocBook ... #+END_DocBook结构来加
入纯文本的DocBook代码.

** 12.7iCalendar的导出
| C-c C-e i | 在一个".ice"文件中为当前文件创建iCaalendar项.                                                                    |
|-----------+------------------------------------------------------------------------------------------------------------------|
| C-c C-e c | 从org-agenda-file中的所有文件创建一个圈套的iCalendar文件,并写入到org-combined-agenda-icalendar-file指定的文件中. |
|-----------+------------------------------------------------------------------------------------------------------------------|

* 13 发布
Org包含一个发布管理系统,可以配置一个由相互链接的Org文件组成的工程项目的自动向
HTML转换.你也可以设置Org,将导出的HTML页面和相应的附件如图片,源代码文件等自动上传
到服务器.
下面是一个例子:
#+BEGIN_SRC 
(setq org-publish-project-alist
     '(("org"
        :base-directory "~/org/"
	:publishing-directory "~/public_html"
	:section-numbers nil
	:table-of-contents nil
	:style "<link rel=\"stylesheet\"
	       href=\"../other/mystyle.css\"
	       type=\"text/css\"/>)))
#+END_SRC
| C-c C-e C | 提示指明一个项目,将所有的文件发布 |
|-----------+-----------------------------------|
| C-c C-e P | 发布包含当前文件的项目            |
|-----------+-----------------------------------|
| C-c C-e F | 只发布当前文件.                   |
|-----------+-----------------------------------|
| C-c C-e E | 发布所有项目                      |
|-----------+-----------------------------------|

